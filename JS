Data types in JS:
  undefined, null, boolean (true/false), string, symbol, bigint, number, object
Print to console:
  console.log(objectsToBePrinted);
Escape characters:
  \\;
  \r;
  \t;
  \b;
  \n;
  \f; //form feed
Array modifiers:
  push();
  pop();
  shift();
  unshift();
Changing array to string:
  stringify(arr);

function (parameter) {
} //processed value is undefined w/o return statement

Comparison:
  == //embedded type conversion. 10 == "10" evaluates to true
  === //strict equality, no type conversion. 10 === "10" evaluates to false
  != //the opposite of ==. 1 != true gives false
  !== //the opposite of ===.
  > < //auto type conversion.

Conditionals
switch(val) { //used inside a function
  case 1: //if (val === 1)
    ...
  case 2: //else if (val === 2)
    ...
  default: //else
    ...
  }
  
Conditional operators
function compare(a,b) {
  return (a>b) ? "a is greater"
  : (a==b) ? "a equals b"
  : "b is greater";
  }

Objects (complex) //key:value
var animals = {
  "cat":{
    name: "Bob",
    "year born": 2020,
    food: ["fish", "beef"]
    },
  "dog":{
    ...
    },
  ...
}

Lookup
animals["cat"].hasOwnProperty("age") == false
for (var i = 0; i < animals.length; i++) {
  return animals[i].food;
}

ES6
var VS let VS const
- let prevents overwriting keywords and creates new objects when new values are assigned (as in var)
- const declares read-only variable

REST and SPREAD
const getSum(...args) => {


destructuring assignment
- swap two elements directly with [a,b] = [b,a]

  



